<?php

namespace DoctrineProxies\__CG__\Application\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class MlaUsers extends \Application\Entity\MlaUsers implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'id', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'token', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'checksum', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'title', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'firstname', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'lastname', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'password', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'salt', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'email', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'role', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'registrationKey', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'confirmed', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'registerDate', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'lastvisitDate', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'block', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'company'];
        }

        return ['__isInitialized__', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'id', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'token', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'checksum', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'title', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'firstname', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'lastname', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'password', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'salt', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'email', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'role', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'registrationKey', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'confirmed', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'registerDate', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'lastvisitDate', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'block', '' . "\0" . 'Application\\Entity\\MlaUsers' . "\0" . 'company'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (MlaUsers $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setToken($token)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setToken', [$token]);

        return parent::setToken($token);
    }

    /**
     * {@inheritDoc}
     */
    public function getToken()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getToken', []);

        return parent::getToken();
    }

    /**
     * {@inheritDoc}
     */
    public function setChecksum($checksum)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChecksum', [$checksum]);

        return parent::setChecksum($checksum);
    }

    /**
     * {@inheritDoc}
     */
    public function getChecksum()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChecksum', []);

        return parent::getChecksum();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setFirstname($firstname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFirstname', [$firstname]);

        return parent::setFirstname($firstname);
    }

    /**
     * {@inheritDoc}
     */
    public function getFirstname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFirstname', []);

        return parent::getFirstname();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastname($lastname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastname', [$lastname]);

        return parent::setLastname($lastname);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastname', []);

        return parent::getLastname();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', [$password]);

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', []);

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setSalt($salt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSalt', [$salt]);

        return parent::setSalt($salt);
    }

    /**
     * {@inheritDoc}
     */
    public function getSalt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSalt', []);

        return parent::getSalt();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', [$email]);

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', []);

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setRole($role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRole', [$role]);

        return parent::setRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function getRole()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRole', []);

        return parent::getRole();
    }

    /**
     * {@inheritDoc}
     */
    public function setRegistrationKey($registrationKey)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRegistrationKey', [$registrationKey]);

        return parent::setRegistrationKey($registrationKey);
    }

    /**
     * {@inheritDoc}
     */
    public function getRegistrationKey()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRegistrationKey', []);

        return parent::getRegistrationKey();
    }

    /**
     * {@inheritDoc}
     */
    public function setConfirmed($confirmed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConfirmed', [$confirmed]);

        return parent::setConfirmed($confirmed);
    }

    /**
     * {@inheritDoc}
     */
    public function getConfirmed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConfirmed', []);

        return parent::getConfirmed();
    }

    /**
     * {@inheritDoc}
     */
    public function setRegisterDate($registerDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRegisterDate', [$registerDate]);

        return parent::setRegisterDate($registerDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getRegisterDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRegisterDate', []);

        return parent::getRegisterDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastvisitDate($lastvisitDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastvisitDate', [$lastvisitDate]);

        return parent::setLastvisitDate($lastvisitDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastvisitDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastvisitDate', []);

        return parent::getLastvisitDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setBlock($block)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBlock', [$block]);

        return parent::setBlock($block);
    }

    /**
     * {@inheritDoc}
     */
    public function getBlock()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlock', []);

        return parent::getBlock();
    }

    /**
     * {@inheritDoc}
     */
    public function setCompany(\Application\Entity\NmtApplicationCompany $company = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCompany', [$company]);

        return parent::setCompany($company);
    }

    /**
     * {@inheritDoc}
     */
    public function getCompany()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCompany', []);

        return parent::getCompany();
    }

}
